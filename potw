#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Aug 26 10:42:29 2019

@author: rmoctezuma
"""
# POTW AUTOMATION

import pandas as pd
from datetime import datetime, timedelta
import pytz
import requests
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import time
from pandas.io.json import json_normalize

# Load credentials and tokens
creds = pd.read_csv('credentials/credentials.csv').set_index('key').transpose()
google_keys_file = 'credentials/google_keys.json'


# Get Clan IDs and names
def get_clan_list():
    scope = ['https://spreadsheets.google.com/feeds','https://www.googleapis.com/auth/drive']
    creds = ServiceAccountCredentials.from_json_keyfile_name(google_keys_file, scope)
    client = gspread.authorize(creds)
    keyfile_sheet = client.open("SGC Clans Key File").worksheet('Key')
    clan_data = keyfile_sheet.get_all_records()
    clan_df = pd.DataFrame(clan_data,columns = ['Name','Tag','ID','Platform','Key'])
    return clan_df

def get_clan_members(clan_id):
    # Get the data!
    bungie_api = "https://www.bungie.net/Platform"
    call = "/GroupV2/" + str(clan_id) + "/Members/"
    #call = "/User/GetBungieNetUserById/" + clan_id + "/"
    # Get the data from the API
    response = requests.get(bungie_api + call, headers =  { 'X-API-Key' : creds.bungie_api.value })
    
    # Convert the JSON response to a Pandas dataframe and extract results
    df = pd.read_json(response.text)
    results = df.loc['results','Response']
    #results = response.json()
    return results

def get_clan_members_awesome_version(clan_id):
    # Get the data!
    bungie_api = "https://www.bungie.net/Platform"
    call = "/GroupV2/" + str(clan_id) + "/Members/"
    #call = "/User/GetBungieNetUserById/" + clan_id + "/"
    # Get the data from the API
    response = requests.get(bungie_api + call, headers =  { 'X-API-Key' : creds.bungie_api.value })
    
    # Convert the JSON response to a FLATTENED Pandas dataframe and extract results
    df = pd.read_json(response.text)
    results = json_normalize(df.loc['results','Response'])
    return results

def get_char_id(m_type, d2_id):
    bungie_api = "https://www.bungie.net/Platform"
    call = "/Destiny2/" + m_type + "/Profile/" + d2_id + "/?components=200"
    # Get the data from the API
    response = requests.get(bungie_api + call, headers =  { 'X-API-Key' : creds.bungie_api.value })
    df = pd.read_json(response.text)
    character_data = pd.DataFrame(df.loc['characters','Response']['data']).transpose()
    chars = character_data[['characterId', 'classType']]
    #results = response.json()
    return chars

def get_char(m_type, d2_id, char_id):
    bungie_api = "https://www.bungie.net/Platform"
    call = "/Destiny2/" + m_type + "/Profile/" + d2_id + "/Character/" + char_id + "/?components=202"
    #call = "/User/GetBungieNetUserById/" + clan_id + "/"
    # Get the data from the API
    response = requests.get(bungie_api + call, headers =  { 'X-API-Key' : creds.bungie_api.value })
    results = pd.DataFrame(response.json()['Response']['progressions']['data']['milestones']).transpose()
    return results

def get_milestone(ms_hash):
    bungie_api = "http://www.bungie.net/Platform/"
    call = "/Destiny2/Manifest/" + 'DestinyMilestoneDefinition/' + str(ms_hash) + '/?definitions=True'
    # Get the data from the API
    response = requests.get(bungie_api + call, headers =  { 'X-API-Key' : creds.bungie_api.value })
    #results = response.json()
    df = pd.read_json(response.text)
    #results = df.loc['results','Response']
    return df

def get_activity(activity_hash):
    bungie_api = "http://www.bungie.net/Platform/"
    call = "/Destiny2/Manifest/" + 'DestinyActivityDefinition/' + str(activity_hash) + '/?definitions=True'
    # Get the data from the API
    response = requests.get(bungie_api + call, headers =  { 'X-API-Key' : creds.bungie_api.value })
    #results = response.json()
    df = pd.read_json(response.text)
    #results = df.loc['results','Response']
    return df

def get_clan_rewards(clan_id):
    bungie_api = "https://www.bungie.net/Platform"
    call = "/Destiny2/Clan/" + clan_id + "/WeeklyRewardState/"
    # Get the data from the API
    response = requests.get(bungie_api + call, headers =  { 'X-API-Key' : creds.bungie_api.value })
    results = response.json()
    return results

''' Test code
vii = get_clan_members('3007121')
lvmars = get_char_id('4','4611686018467267066')
warlock = get_char('4','4611686018467267066','2305843009300469593')
# CoS Data
ms_hash = 2590427074
activity_hash = 3333172150
'''
vii = get_clan_members_awesome_version('3007121')
vii = vii[['destinyUserInfo.membershipId','destinyUserInfo.displayName','destinyUserInfo.membershipType']]
vii.columns = ['destinyId', 'name', 'mem_type']

lvmars = get_char_id('4','4611686018467267066')

char_activities = get_char('4','4611686018467267066','2305843009300469593')

cos = pd.DataFrame(char_activities.loc['2590427074']['activities'][0]['phases']).complete.all()
levi = pd.DataFrame(char_activities.loc['3660836525']['activities'][0]['phases']).complete.all()
eow = pd.DataFrame(char_activities.loc['2986584050']['activities'][0]['phases']).complete.all()
sos = pd.DataFrame(char_activities.loc['2683538554']['activities'][0]['phases']).complete.all()
lw = pd.DataFrame(char_activities.loc['3181387331']['activities'][0]['phases']).complete.all()
sotp = pd.DataFrame(char_activities.loc['1342567285']['activities'][0]['phases']).complete.all()
crucible = char_activities.loc['157823523']['activities'][0]['challenges'][0]['objective']['complete']
strikes = char_activities.loc['1437935813']['activities'][0]['challenges'][0]['objective']['complete']
gambit = char_activities.loc['3448738070']['activities'][0]['challenges'][0]['objective']['complete']
gambit_prime = char_activities.loc['2010672046']['activities'][0]['challenges'][0]['objective']['complete']
reckoning = char_activities.loc['601087286']['activities'][0]['challenges'][0]['objective']['complete']


'''
    # Now extract the goodies!
    clan = pd.DataFrame(results,columns = ['memberType','isOnline','lastOnlineStatusChange','groupId','destinyUserInfo',
                                           'bungieNetUserInfo','joinDate'])
    clan['destinyDisplayName'] = clan.apply(lambda x: x.destinyUserInfo['displayName'],axis=1)
    clan['destinyMembershipType'] = clan.apply(lambda x: x.destinyUserInfo['membershipType'],axis=1)
    clan['destinyMembershipId'] = clan.apply(lambda x: x.destinyUserInfo['membershipId'],axis=1)
    clan['bungieSupplementalDisplayName'] = clan.apply(lambda x: x.bungieNetUserInfo['supplementalDisplayName'],axis=1)
    clan['bungieIconPath'] = clan.apply(lambda x: x.bungieNetUserInfo['iconPath'],axis=1)
    clan['bungieMembershipType'] = clan.apply(lambda x: x.bungieNetUserInfo['membershipType'],axis=1)
    clan['bungieMembershipId'] = clan.apply(lambda x: x.bungieNetUserInfo['membershipId'],axis=1)
    clan['bungieDisplayName'] = clan.apply(lambda x: x.bungieNetUserInfo['displayName'],axis=1)
    #clan['milestoneCompletionStatus'] = clan.apply(lambda x: x.bungieNetUserInfo[])
    
    # Convert naive datetime to date-aware
    clan['lastOnline'] = pd.to_datetime(clan.lastOnlineStatusChange, unit = 's').dt.tz_localize('UTC')
    
    # Convert to US Central
    clan['lastOnline'] = clan.lastOnline.dt.tz_convert('US/Central')
    right_now = pytz.utc.localize(datetime.utcnow()).astimezone(pytz.timezone('US/Central'))
    clan['game_active'] = ((right_now - clan.lastOnline).dt.days <= 10)
    # clan = clan[['destinyDisplayName','memberType','game_active']]
    return clan
    '''